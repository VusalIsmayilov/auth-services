version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: authservice_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-authservice_db}
      POSTGRES_USER: ${POSTGRES_USER:-authservice_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-authservice_strong_password_123}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - authservice_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-authservice_user} -d ${POSTGRES_DB:-authservice_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: authservice_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@authservice.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    # Remove direct port exposure - access through API Gateway
    expose:
      - "80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./scripts/servers.json:/pgadmin4/servers.json:ro
    networks:
      - authservice_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Redis for Caching (Optional - Ready for future use)
  redis:
    image: redis:7-alpine
    container_name: authservice_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - authservice_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
  
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: authservice_keycloak
    environment:
      # default admin user
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # import a predefined realm on startup (optional)
      KC_DB: dev-mem
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
    command:
      [
        "start-dev",
        "--hostname-strict=false"
      ]
    # Remove direct port exposure - access through Nginx
    expose:
      - "8080"
    networks:
      - authservice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Authentication Service Application (Development)
  authservice:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: authservice_app
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB:-authservice_db};Username=${POSTGRES_USER:-authservice_user};Password=${POSTGRES_PASSWORD:-authservice_strong_password_123}
      - JWT__SecretKey=${JWT_SECRET_KEY:-YourVeryStrongSecretKeyThatIsAtLeast32CharactersLong!}
      - JWT__Issuer=${JWT_ISSUER:-AuthService}
      - JWT__Audience=${JWT_AUDIENCE:-AuthService}
      - Redis__ConnectionString=redis:6379,password=${REDIS_PASSWORD:-redis_password_123}
    # Remove direct port exposure - access through Nginx
    expose:
      - "80"
    volumes:
      - app_data:/app/data
    networks:
      - authservice_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

networks:
  authservice_network:
    name: authservice_authservice_network
    driver: bridge
  # Connect to shared microservices network for API Gateway
  microservices_network:
    external: true
    name: microservices_network

# Environment-specific overrides
# For production, use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
