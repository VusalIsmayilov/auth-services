# AuthService Configuration v1.1
# Environment configuration for development and production

# ==============================================
# DATABASE CONFIGURATION
# ==============================================
POSTGRES_DB=authservice_db
POSTGRES_USER=authservice_user
POSTGRES_PASSWORD=authservice_strong_password_123
POSTGRES_PORT=5432

# ==============================================
# PGADMIN CONFIGURATION
# ==============================================
PGADMIN_EMAIL=admin@authservice.com
PGADMIN_PASSWORD=admin123
PGADMIN_PORT=8080

# ==============================================
# REDIS CONFIGURATION (Optional - Future use)
# ==============================================
REDIS_PORT=6379
REDIS_PASSWORD=redis_password_123

# ==============================================
# APPLICATION CONFIGURATION
# ==============================================
ASPNETCORE_ENVIRONMENT=Development
AUTH_HTTP_PORT=5000
AUTH_HTTPS_PORT=5001

# ==============================================
# JWT CONFIGURATION
# ==============================================
# IMPORTANT: Change these values in production!
JWT_SECRET_KEY=YourVeryStrongSecretKeyThatIsAtLeast32CharactersLong!
JWT_ISSUER=AuthService
JWT_AUDIENCE=AuthService

# Token Expiry Settings (in minutes/days)
JWT_ACCESS_TOKEN_EXPIRY_MINUTES=15
JWT_REFRESH_TOKEN_EXPIRY_DAYS=7

# ==============================================
# SSL CERTIFICATE CONFIGURATION (Development)
# ==============================================
CERT_PASSWORD=dev_cert_password

# ==============================================
# PRODUCTION OVERRIDES
# ==============================================
# Uncomment and modify for production deployment

# Production Database (Use managed database service)
# POSTGRES_HOST=your-prod-db-host.com
# POSTGRES_PORT=5432
# POSTGRES_SSL_MODE=require

# Production JWT Settings
# JWT_SECRET_KEY=YourProductionSecretKeyThatIsEvenStrongerAndLonger!
# JWT_ISSUER=YourCompanyAuthService
# JWT_AUDIENCE=YourCompanyAPI

# Production Redis (for caching and rate limiting)
# REDIS_CONNECTION_STRING=your-prod-redis-host:6380,password=your-redis-password,ssl=True

# ==============================================
# MONITORING & LOGGING
# ==============================================
# Log Level (Trace, Debug, Information, Warning, Error, Critical)
LOG_LEVEL=Information

# Application Insights (Azure)
# APPINSIGHTS_INSTRUMENTATIONKEY=your-app-insights-key

# Serilog Configuration
SERILOG_WRITE_TO_CONSOLE=true
SERILOG_WRITE_TO_FILE=true
SERILOG_FILE_PATH=logs/authservice-.log

# ==============================================
# RATE LIMITING CONFIGURATION
# ==============================================
# OTP Rate Limiting
OTP_MAX_ATTEMPTS_PER_HOUR=3
OTP_CLEANUP_INTERVAL_MINUTES=10

# Refresh Token Rate Limiting
REFRESH_TOKEN_MAX_REQUESTS_PER_MINUTE=10
REFRESH_TOKEN_CLEANUP_INTERVAL_HOURS=1

# API Rate Limiting (requests per minute)
API_RATE_LIMIT_PER_MINUTE=100

# ==============================================
# SECURITY HEADERS
# ==============================================
ENABLE_HSTS=true
ENABLE_CSP=true
ENABLE_SECURITY_HEADERS=true

# ==============================================
# CORS CONFIGURATION
# ==============================================
# Allowed Origins (comma-separated)
CORS_ALLOWED_ORIGINS=http://localhost:3000,https://localhost:3000,http://localhost:8080

# ==============================================
# EMAIL CONFIGURATION (Future feature)
# ==============================================
# SMTP Settings for email verification
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@company.com
# SMTP_PASSWORD=your-app-password
# SMTP_FROM_EMAIL=noreply@yourcompany.com
# SMTP_FROM_NAME=YourCompany Auth Service

# ==============================================
# SMS CONFIGURATION (Future feature)
# ==============================================
# Twilio Settings
# TWILIO_ACCOUNT_SID=your-twilio-account-sid
# TWILIO_AUTH_TOKEN=your-twilio-auth-token
# TWILIO_FROM_PHONE=+1234567890

# AWS SNS Settings (Alternative)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_REGION=us-east-1
# AWS_SNS_TOPIC_ARN=arn:aws:sns:us-east-1:123456789012:your-topic

# ==============================================
# FEATURE FLAGS
# ==============================================
ENABLE_SWAGGER=true
ENABLE_HEALTH_CHECKS=true
ENABLE_METRICS=true
ENABLE_BACKGROUND_SERVICES=true

# ==============================================
# DEVELOPMENT SETTINGS
# ==============================================
# Hot reload and development features
ASPNETCORE_ENABLE_HOT_RELOAD=true
ASPNETCORE_WATCH_SUPPRESS_LAUNCH_BROWSER=true

# Database Seeding
ENABLE_DATABASE_SEEDING=false
CREATE_TEST_USERS=false

# ==============================================
# BACKUP CONFIGURATION
# ==============================================
# Database backup settings
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE_CRON=0 2 * * *  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30
# BACKUP_STORAGE_PATH=/backups
# BACKUP_ENCRYPTION_KEY=your-backup-encryption-key

# ==============================================
# INTEGRATION SETTINGS
# ==============================================
# OAuth Providers (Future features)
# GOOGLE_CLIENT_ID=your-google-client-id
# GOOGLE_CLIENT_SECRET=your-google-client-secret
# FACEBOOK_APP_ID=your-facebook-app-id
# FACEBOOK_APP_SECRET=your-facebook-app-secret
# MICROSOFT_CLIENT_ID=your-microsoft-client-id
# MICROSOFT_CLIENT_SECRET=your-microsoft-client-secret

# ==============================================
# CONTAINER CONFIGURATION
# ==============================================
# Docker container settings
COMPOSE_PROJECT_NAME=authservice
COMPOSE_HTTP_TIMEOUT=120

# Health check settings
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3

# ==============================================
# NOTES
# ==============================================
# 1. Never commit this file with real credentials to version control
# 2. Use environment-specific .env files (.env.development, .env.production)
# 3. In production, use secure secret management (Azure KeyVault, AWS Secrets Manager, etc.)
# 4. Regularly rotate JWT secret keys and database passwords
# 5. Monitor token usage patterns for security anomalies
# 6. Set up alerts for failed authentication attempts
# 7. Configure backup and disaster recovery procedures
# 8. Review and update security settings regularly